{
    "api": [
        {
            "description": "Creates a new user with the provided details.",
            "endpoint": "/api/users",
            "function_name": "create_user",
            "function_source": "@app.route('/api/users', methods=['POST'])\n@CacaoDocs.doc_api(doc_type=\"api\", tag=\"users\")\ndef create_user():\n    \"\"\"\n    Endpoint: /api/users\n    Method:   POST\n    Version:  v1\n    Status:   Production\n    Last Updated: 2024-04-25\n\n    Description:\n        Creates a new user with the provided details.\n\n    Args:\n        None\n\n    JSON Body:\n        {\n            \"username\": \"johndoe\",\n            \"email\": \"john@example.com\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"addresses\": [\n                {\n                    \"street\": \"123 Main St\",\n                    \"city\": {\n                        \"name\": \"Boston\",\n                        \"state\": \"Massachusetts\",\n                        \"country_code\": \"US\",\n                        \"latitude\": 42.3601,\n                        \"longitude\": -71.0589\n                    },\n                    \"country\": {\n                        \"code\": \"US\",\n                        \"name\": \"United States\",\n                        \"phone_code\": \"+1\"\n                    },\n                    \"postal_code\": \"02101\"\n                }\n            ]\n        }\n\n    Returns:\n        @type{User}: The created user record with full address details.\n    \"\"\"\n    data = request.json or {}\n    try:\n        user = db.create_user(data)\n        return jsonify(user.to_dict()), 201\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 400\n",
            "inputs": [],
            "json_body": "{\n            \"username\": \"johndoe\",\n            \"email\": \"john@example.com\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"addresses\": [\n                {\n                    \"street\": \"123 Main St\",\n                    \"city\": {\n                        \"name\": \"Boston\",\n                        \"state\": \"Massachusetts\",\n                        \"country_code\": \"US\",\n                        \"latitude\": 42.3601,\n                        \"longitude\": -71.0589\n                    },\n                    \"country\": {\n                        \"code\": \"US\",\n                        \"name\": \"United States\",\n                        \"phone_code\": \"+1\"\n                    },\n                    \"postal_code\": \"02101\"\n                }\n            ]\n        }",
            "last_updated": "2024-04-25",
            "method": "POST",
            "outputs": null,
            "returns": {
                "description": "The created user record with full address details.",
                "full_type": "User",
                "is_list": false,
                "is_type_ref": true,
                "type_name": "User"
            },
            "status": "Production",
            "tag": "users",
            "type": "api",
            "version": "v1"
        },
        {
            "args": {
                "user_id": {
                    "bg_color": "#E0F2FE",
                    "color": "#0EA5E9",
                    "description": "The unique identifier of the user.",
                    "emoji": "🔑",
                    "type": "int"
                }
            },
            "description": "Retrieves the details of a user given their unique ID.",
            "endpoint": "/api/users/<user_id>",
            "function_name": "get_user",
            "function_source": "@app.route('/api/users/<int:user_id>', methods=['GET'])\n@CacaoDocs.doc_api(doc_type=\"api\", tag=\"users\")\ndef get_user(user_id):\n    \"\"\"\n    Endpoint: /api/users/<user_id>\n    Method:   GET\n    Version:  v1\n    Status:   Production\n    Last Updated: 2024-04-25\n\n    Description:\n        Retrieves the details of a user given their unique ID.\n\n    Args:\n        user_id (int): The unique identifier of the user.\n\n    Returns:\n        @type{User}: The complete user record with all associated data.\n\n    Raises:\n        UserNotFoundError: If no user is found with the given `user_id`.\n    \"\"\"\n    if user := db.get_user(user_id):\n        return user  # Now Flask will use our custom JSON encoder\n    return {\"error\": \"User not found\"}, 404\n",
            "inputs": [
                "user_id"
            ],
            "last_updated": "2024-04-25",
            "method": "GET",
            "outputs": null,
            "raises": "UserNotFoundError: If no user is found with the given `user_id`.",
            "returns": {
                "description": "The complete user record with all associated data.",
                "full_type": "User",
                "is_list": false,
                "is_type_ref": true,
                "type_name": "User"
            },
            "status": "Production",
            "tag": "users",
            "type": "api",
            "version": "v1"
        },
        {
            "args": {
                "user_id": {
                    "bg_color": "#E0F2FE",
                    "color": "#0EA5E9",
                    "description": "The unique identifier of the user.",
                    "emoji": "🔑",
                    "type": "int"
                }
            },
            "description": "Updates the email address of an existing user.",
            "endpoint": "/api/users/<user_id>/email",
            "function_name": "update_user_email",
            "function_source": "@app.route('/api/users/<int:user_id>/email', methods=['PATCH'])\n@CacaoDocs.doc_api(doc_type=\"api\", tag=\"users\")\ndef update_user_email(user_id):\n    \"\"\"\n    Endpoint: /api/users/<user_id>/email\n    Method:   PATCH\n    Version:  v1\n    Status:   In Review\n    Last Updated: 2024-04-25\n\n    Description:\n        Updates the email address of an existing user.\n\n    Args:\n        user_id (int): The unique identifier of the user.\n\n    JSON Body:\n        {\n            \"email\": \"newemail@example.com\"\n        }\n\n    Returns:\n        @type{User}: The updated user record.\n\n    Raises:\n        UserNotFoundError: If no user is found with the given `user_id`.\n    \"\"\"\n    try:\n        user = db.update_user_email(user_id, request.json.get(\"email\"))\n        return jsonify(user.to_dict()), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 404\n",
            "inputs": [
                "user_id"
            ],
            "json_body": "{\n            \"email\": \"newemail@example.com\"\n        }",
            "last_updated": "2024-04-25",
            "method": "PATCH",
            "outputs": null,
            "raises": "UserNotFoundError: If no user is found with the given `user_id`.",
            "returns": {
                "description": "The updated user record.",
                "full_type": "User",
                "is_list": false,
                "is_type_ref": true,
                "type_name": "User"
            },
            "status": "In Review",
            "tag": "users",
            "type": "api",
            "version": "v1"
        },
        {
            "args": {
                "user_id": {
                    "bg_color": "#E0F2FE",
                    "color": "#0EA5E9",
                    "description": "The unique identifier of the user.",
                    "emoji": "🔑",
                    "type": "int"
                }
            },
            "description": "Deletes an existing user from the system.",
            "endpoint": "/api/users/<user_id>",
            "function_name": "delete_user",
            "function_source": "@app.route('/api/users/<int:user_id>', methods=['DELETE'])\n@CacaoDocs.doc_api(doc_type=\"api\", tag=\"users\")\ndef delete_user(user_id):\n    \"\"\"\n    Endpoint: /api/users/<user_id>\n    Method:   DELETE\n    Version:  v1\n    Status:   In Review\n    Last Updated: 2024-04-25\n\n    Description:\n        Deletes an existing user from the system.\n\n    Args:\n        user_id (int): The unique identifier of the user.\n\n    Returns:\n        @type{dict}: A message confirming deletion.\n\n    Raises:\n        UserNotFoundError: If no user is found with the given `user_id`.\n    \"\"\"\n    try:\n        db.delete_user(user_id)\n        return jsonify({\"message\": f\"User {user_id} deleted successfully.\"}), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 404\n",
            "inputs": [
                "user_id"
            ],
            "last_updated": "2024-04-25",
            "method": "DELETE",
            "outputs": null,
            "raises": "UserNotFoundError: If no user is found with the given `user_id`.",
            "returns": {
                "description": "A message confirming deletion.",
                "full_type": "dict",
                "is_list": false,
                "is_type_ref": true,
                "type_name": "dict"
            },
            "status": "In Review",
            "tag": "users",
            "type": "api",
            "version": "v1"
        },
        {
            "description": "Retrieves a list of all users in the system.",
            "endpoint": "/api/users",
            "function_name": "list_users",
            "function_source": "@app.route('/api/users', methods=['GET'])\n@CacaoDocs.doc_api(doc_type=\"api\", tag=\"users\")\ndef list_users():\n    \"\"\"\n    Endpoint: /api/users\n    Method:   GET\n    Version:  v1\n    Status:   Production\n    Last Updated: 2024-04-25\n\n    Description:\n        Retrieves a list of all users in the system.\n\n    Args:\n        None\n\n    Returns:\n        @type{list[User]}: A list of user records.\n    \"\"\"\n    users = [user.to_dict() for user in db.list_users()]\n    return jsonify(users), 200\n",
            "inputs": [],
            "last_updated": "2024-04-25",
            "method": "GET",
            "outputs": null,
            "returns": {
                "description": "A list of user records.",
                "full_type": "list[User]",
                "is_list": true,
                "is_type_ref": true,
                "type_name": "User"
            },
            "status": "Production",
            "tag": "users",
            "type": "api",
            "version": "v1"
        }
    ],
    "docs": [
        {
            "args": {
                "a": {
                    "bg_color": "#E0E7FF",
                    "color": "#6366F1",
                    "description": "First number",
                    "emoji": "🔢",
                    "type": "float"
                },
                "b": {
                    "bg_color": "#E0E7FF",
                    "color": "#6366F1",
                    "description": "Second number",
                    "emoji": "🔢",
                    "type": "float"
                }
            },
            "description": "Adds two numbers together.",
            "function_name": "add",
            "function_source": "    @CacaoDocs.doc_api(doc_type=\"docs\", tag=\"calculator\")\n    def add(self, a, b):\n        \"\"\"\n        Method: add\n        Version: v1\n        Status: Production\n        \n        Description:\n            Adds two numbers together.\n            \n        Args:\n            a (float): First number\n            b (float): Second number\n            \n        Returns:\n            @type{float}: The sum of a and b\n        \"\"\"\n        return a + b\n",
            "inputs": [
                "self",
                "a",
                "b"
            ],
            "method": "add",
            "outputs": null,
            "returns": {
                "description": "The sum of a and b",
                "full_type": "float",
                "is_list": false,
                "is_type_ref": true,
                "type_name": "float"
            },
            "status": "Production",
            "tag": "calculator",
            "type": "docs",
            "version": "v1"
        },
        {
            "args": {
                "a": {
                    "bg_color": "#E0E7FF",
                    "color": "#6366F1",
                    "description": "First number",
                    "emoji": "🔢",
                    "type": "float"
                },
                "b": {
                    "bg_color": "#E0E7FF",
                    "color": "#6366F1",
                    "description": "Second number",
                    "emoji": "🔢",
                    "type": "float"
                }
            },
            "description": "Subtracts second number from first number.",
            "function_name": "subtract",
            "function_source": "    @CacaoDocs.doc_api(doc_type=\"docs\", tag=\"calculator\")\n    def subtract(self, a, b):\n        \"\"\"\n        Method: subtract\n        Version: v1\n        Status: Production\n        \n        Description:\n            Subtracts second number from first number.\n            \n        Args:\n            a (float): First number\n            b (float): Second number\n            \n        Returns:\n            @type{float}: The difference between a and b\n        \"\"\"\n        return a - b\n",
            "inputs": [
                "self",
                "a",
                "b"
            ],
            "method": "subtract",
            "outputs": null,
            "returns": {
                "description": "The difference between a and b",
                "full_type": "float",
                "is_list": false,
                "is_type_ref": true,
                "type_name": "float"
            },
            "status": "Production",
            "tag": "calculator",
            "type": "docs",
            "version": "v1"
        },
        {
            "args": {
                "a": {
                    "bg_color": "#E0E7FF",
                    "color": "#6366F1",
                    "description": "First number",
                    "emoji": "🔢",
                    "type": "float"
                },
                "b": {
                    "bg_color": "#E0E7FF",
                    "color": "#6366F1",
                    "description": "Second number",
                    "emoji": "🔢",
                    "type": "float"
                }
            },
            "description": "multiply two numbers together.",
            "function_name": "multiply",
            "function_source": "    @CacaoDocs.doc_api(doc_type=\"docs\", tag=\"calculator\")\n    def multiply(self, a: float, b: float) -> float:\n        \"\"\"\n        Method: multiply\n        Version: v1\n        Status: Production\n        \n        Description:\n            multiply two numbers together.\n            \n        Args:\n            a (float): First number\n            b (float): Second number\n            \n        Returns:\n            @type{float}: The difference between a and b\n        \"\"\"\n        return a * b\n",
            "inputs": [
                "self",
                "a",
                "b"
            ],
            "method": "multiply",
            "outputs": "<class 'float'>",
            "returns": {
                "description": "The difference between a and b",
                "full_type": "float",
                "is_list": false,
                "is_type_ref": true,
                "type_name": "float"
            },
            "status": "Production",
            "tag": "calculator",
            "type": "docs",
            "version": "v1"
        },
        {
            "description": "Check if the calculator is operational.",
            "function_name": "calculator_status_check",
            "function_source": "    @CacaoDocs.doc_api(doc_type=\"docs\", tag=\"calculator\")\n    def calculator_status_check(self) -> str:\n        \"\"\"\n        Method: calculator_status_check\n        Version: v1\n        Status: Production\n\n        Description:\n            Check if the calculator is operational.\n\n        Returns:\n            @type{str}: The operational status of the calculator\n        \"\"\"\n        return \"Calculator is operational\", 200\n",
            "inputs": [
                "self"
            ],
            "method": "calculator_status_check",
            "outputs": "<class 'str'>",
            "returns": {
                "description": "The operational status of the calculator",
                "full_type": "str",
                "is_list": false,
                "is_type_ref": true,
                "type_name": "str"
            },
            "status": "Production",
            "tag": "calculator",
            "type": "docs",
            "version": "v1"
        }
    ],
    "types": [
        {
            "args": {
                "code": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "The ISO country code (e.g., 'US', 'UK')",
                    "emoji": "📝",
                    "type": "str"
                },
                "created_at": {
                    "bg_color": "#F1F5F9",
                    "color": "#d97d37",
                    "description": "Timestamp when the record was created",
                    "emoji": "📅",
                    "type": "datetime"
                },
                "id": {
                    "bg_color": "#E0F2FE",
                    "color": "#0EA5E9",
                    "description": "Unique identifier for the country",
                    "emoji": "🔑",
                    "type": "str"
                },
                "name": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "The full country name",
                    "emoji": "📝",
                    "type": "str"
                },
                "phone_code": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "International dialing code",
                    "emoji": "📝",
                    "type": "str"
                },
                "updated_at": {
                    "bg_color": "#F1F5F9",
                    "color": "#d97d37",
                    "description": "Timestamp when the record was last updated",
                    "emoji": "📅",
                    "type": "datetime"
                }
            },
            "description": "Represents a country in the system.",
            "function_name": "Country",
            "function_source": "@dataclass\n@CacaoDocs.doc_api(doc_type=\"types\", tag=\"locations\")\nclass Country:\n    \"\"\"\n    Description:\n        Represents a country in the system.\n\n    Args:\n        id (str): Unique identifier for the country\n        code (str): The ISO country code (e.g., 'US', 'UK')\n        name (str): The full country name\n        phone_code (str): International dialing code\n        created_at (datetime): Timestamp when the record was created\n        updated_at (datetime): Timestamp when the record was last updated\n    \"\"\"\n    id: str\n    code: str\n    name: str\n    phone_code: str\n    created_at: datetime\n    updated_at: datetime\n",
            "inputs": [],
            "outputs": null,
            "tag": "locations",
            "type": "types"
        },
        {
            "args": {
                "country_code": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "The ISO country code",
                    "emoji": "📝",
                    "type": "str"
                },
                "created_at": {
                    "bg_color": "#F1F5F9",
                    "color": "#d97d37",
                    "description": "Timestamp when the record was created",
                    "emoji": "📅",
                    "type": "datetime"
                },
                "id": {
                    "bg_color": "#E0F2FE",
                    "color": "#0EA5E9",
                    "description": "Unique identifier for the city",
                    "emoji": "🔑",
                    "type": "str"
                },
                "latitude": {
                    "bg_color": "#E0E7FF",
                    "color": "#6366F1",
                    "description": "Geographic latitude",
                    "emoji": "🔢",
                    "type": "float"
                },
                "longitude": {
                    "bg_color": "#E0E7FF",
                    "color": "#6366F1",
                    "description": "Geographic longitude",
                    "emoji": "🔢",
                    "type": "float"
                },
                "name": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "The city name",
                    "emoji": "📝",
                    "type": "str"
                },
                "state": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "State or province name",
                    "emoji": "📝",
                    "type": "str"
                },
                "updated_at": {
                    "bg_color": "#F1F5F9",
                    "color": "#d97d37",
                    "description": "Timestamp when the record was last updated",
                    "emoji": "📅",
                    "type": "datetime"
                }
            },
            "description": "Represents a city within a country.",
            "function_name": "City",
            "function_source": "@dataclass\n@CacaoDocs.doc_api(doc_type=\"types\", tag=\"locations\")\nclass City:\n    \"\"\"\n    Description:\n        Represents a city within a country.\n\n    Args:\n        id (str): Unique identifier for the city\n        name (str): The city name\n        state (str): State or province name\n        country_code (str): The ISO country code\n        latitude (float): Geographic latitude\n        longitude (float): Geographic longitude\n        created_at (datetime): Timestamp when the record was created\n        updated_at (datetime): Timestamp when the record was last updated\n    \"\"\"\n    id: str\n    name: str\n    state: str\n    country_code: str\n    latitude: float\n    longitude: float\n    created_at: datetime\n    updated_at: datetime\n",
            "inputs": [],
            "outputs": null,
            "tag": "locations",
            "type": "types"
        },
        {
            "args": {
                "city": {
                    "bg_color": "#F3F4F6",
                    "color": "#c543ab",
                    "description": "City information",
                    "emoji": "📎",
                    "type": "City"
                },
                "country": {
                    "bg_color": "#DBEAFE",
                    "color": "#3B82F6",
                    "description": "Country information",
                    "emoji": "🔢",
                    "type": "Country"
                },
                "postal_code": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "Postal or ZIP code",
                    "emoji": "📝",
                    "type": "str"
                },
                "street": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "Street name and number",
                    "emoji": "📝",
                    "type": "str"
                }
            },
            "description": "Represents a user's address in the system.",
            "function_name": "Address",
            "function_source": "@dataclass\n@CacaoDocs.doc_api(doc_type=\"types\", tag=\"locations\")\nclass Address:\n    \"\"\"\n    Description:\n        Represents a user's address in the system.\n\n    Args:\n        street (str): Street name and number\n        city (City): City information\n        country (Country): Country information\n        postal_code (str): Postal or ZIP code\n    \"\"\"\n    street: str\n    city: City\n    country: Country\n    postal_code: str\n\n    def to_dict(self) -> dict:\n        \"\"\"Convert address to dictionary format.\"\"\"\n        return {\n            'street': self.street,\n            'city': asdict(self.city),\n            'country': asdict(self.country),\n            'postal_code': self.postal_code\n        }\n\n    @classmethod\n    def from_dict(cls, data: dict) -> 'Address':\n        \"\"\"Create an Address instance from a dictionary.\"\"\"\n        return cls(\n            street=data['street'],\n            city=City(**data['city']),\n            country=Country(**data['country']),\n            postal_code=data['postal_code']\n        )\n",
            "inputs": [],
            "outputs": null,
            "tag": "locations",
            "type": "types"
        },
        {
            "args": {
                "addresses": {
                    "bg_color": "#F3F4F6",
                    "color": "#c543ab",
                    "description": "List of user's addresses",
                    "emoji": "📎",
                    "type": "List[Address]"
                },
                "created_at": {
                    "bg_color": "#F1F5F9",
                    "color": "#d97d37",
                    "description": "Account creation timestamp",
                    "emoji": "📅",
                    "type": "datetime"
                },
                "email": {
                    "bg_color": "#FEE2E2",
                    "color": "#02a6ed",
                    "description": "The user's email address",
                    "emoji": "📧",
                    "type": "str"
                },
                "first_name": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "User's first name",
                    "emoji": "📝",
                    "type": "str"
                },
                "id": {
                    "bg_color": "#E0F2FE",
                    "color": "#0EA5E9",
                    "description": "The unique identifier",
                    "emoji": "🔑",
                    "type": "int"
                },
                "last_name": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "User's last name",
                    "emoji": "📝",
                    "type": "str"
                },
                "updated_at": {
                    "bg_color": "#F1F5F9",
                    "color": "#d97d37",
                    "description": "Last update timestamp",
                    "emoji": "📅",
                    "type": "datetime"
                },
                "username": {
                    "bg_color": "#DCFCE7",
                    "color": "#22C55E",
                    "description": "The user's username",
                    "emoji": "📝",
                    "type": "str"
                }
            },
            "description": "Represents a user in the system with extended information.",
            "function_name": "User",
            "function_source": "@dataclass\n@CacaoDocs.doc_api(doc_type=\"types\", tag=\"models\")\nclass User:\n    \"\"\"\n    Description:\n        Represents a user in the system with extended information.\n\n    Args:\n        id (int): The unique identifier\n        username (str): The user's username\n        email (str): The user's email address\n        first_name (str): User's first name\n        last_name (str): User's last name\n        addresses (List[Address]): List of user's addresses\n        created_at (datetime): Account creation timestamp\n        updated_at (datetime): Last update timestamp\n    \"\"\"\n    id: int\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    addresses: List[Address]\n    created_at: datetime\n    updated_at: datetime\n\n    def to_dict(self) -> dict:\n        \"\"\"Convert the user instance to a dictionary.\"\"\"\n        data = asdict(self)\n        # Convert datetime objects to ISO format strings\n        data['created_at'] = self.created_at.isoformat()\n        data['updated_at'] = self.updated_at.isoformat()\n        return data\n\n    @classmethod\n    def from_dict(cls, data: dict) -> 'User':\n        \"\"\"Create a User instance from a dictionary.\"\"\"\n        # Convert ISO format strings to datetime objects\n        if isinstance(data.get('created_at'), str):\n            data['created_at'] = datetime.fromisoformat(data['created_at'])\n        if isinstance(data.get('updated_at'), str):\n            data['updated_at'] = datetime.fromisoformat(data['updated_at'])\n        \n        # Convert address dictionaries to Address objects\n        if 'addresses' in data:\n            data['addresses'] = [Address(**addr) for addr in data['addresses']]\n            \n        return cls(**data)\n\n    def __json__(self):\n        \"\"\"Flask JSON serialization support.\"\"\"\n        return self.to_dict()\n",
            "inputs": [],
            "outputs": null,
            "tag": "models",
            "type": "types"
        }
    ]
}